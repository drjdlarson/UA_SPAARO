/*
* Brian R Taylor
* brian.taylor@bolderflight.com
* 
* Copyright (c) 2022 Bolder Flight Systems Inc
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the “Software”), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* This protobuf file describes the data log format, which is transpiled
* to a C header and source file for use in the flight code. There should
* only be a single message defined, DatalogMessage, which defines all
* of the data to be logged. The message structure should be flat
* (i.e. no nested messages), consisting of native types.
*/

syntax = "proto3";

/* Data log message */
message DatalogMessage {
  /* System data */
  int32 sys_frame_time_us = 1;
  double sys_time_s = 6;
  /* Inceptor data */
  bool incept_healthy = 20;
  bool incept_new_data = 21;
  bool incept_lost_frame = 22;
  bool incept_failsafe = 23;
  repeated int32 incept_ch = 24;
  /* IMU data */
  bool imu_installed = 40;
  bool imu_healthy = 41;
  bool imu_new_data = 42;
  float imu_die_temp_c = 43;
  repeated float imu_accel_mps2 = 44;
  repeated float imu_gyro_radps = 45;
  /* Mag Data */
  bool mag_installed = 50;
  bool mag_healthy = 51;
  bool mag_new_data = 52;
  float mag_die_temp_c = 53;
  repeated float mag_ut = 54;
  /* GNSS data */
  bool gnss_installed = 60;
  bool gnss_healthy = 61;
  bool gnss_new_data = 62;
  bool rel_pos_avail = 63;
  bool rel_pos_moving_baseline = 64;
  bool rel_pos_baseline_normalized = 65;
  int32 gnss_fix = 66;
  int32 gnss_num_sats = 67;
  int32 gnss_week = 68;
  float gnss_alt_wgs84_m = 69;
  float gnss_horz_acc_m = 70;
  float gnss_vert_acc_m = 71;
  float gnss_vel_acc_m = 72;
  repeated float gnss_ned_vel_mps = 73;
  repeated float rel_pos_acc_ned_m = 74;
  double gnss_tow_s = 75;
  double gnss_lat_rad = 76;
  double gnss_lon_rad = 77;
  repeated double rel_pos_ned_m = 78;
  /* Static pressure data */
  bool static_pres_installed = 90;
  bool static_pres_healthy = 91;
  bool static_pres_new_data = 92;
  float static_pres_die_temp_c = 93;
  float static_pres_pa = 94;
  /* Analog Data */
  repeated float adc_volt = 110;
  /* Power Module Data */
  float pwr_mod_volt_v = 120;
  float pwr_mod_curr_ma = 121;
  /* Nav data */
  bool nav_initialized = 130;
  float nav_pitch_rad = 131;
  float nav_roll_rad = 132;
  float nav_heading_rad = 133;
  float nav_alt_wgs84_m = 134;
  repeated float nav_accel_mps2 = 135;
  repeated float nav_gyro_radps = 136;
  repeated float nav_mag_ut = 137;
  repeated float nav_ned_vel_mps = 138;
  repeated float nav_ned_pos_m = 139;
  double nav_lat_rad = 140;
  double nav_lon_rad = 141;
  float nav_home_alt_wgs84_m = 142;
  double nav_home_lat_rad = 143;
  double nav_home_lon_rad = 144;
  repeated float nav_accel_bias_mps2 = 145;
  repeated float nav_gyro_bias_radps = 146;
  /* VMS data */
  bool vms_advance_waypoint = 170;
  bool vms_motors_enabled = 173;
  int32 vms_mode = 174;
  float vms_throttle_cmd_prcnt = 175;
  float vms_batt_volt_v = 176;
  float vms_batt_curr_ma = 177;
  float vms_batt_consumed_mah = 178;
  float vms_batt_remaining_prcnt = 179;
  float vms_batt_remaining_time_s = 180;
  repeated int32 vms_sbus_cnt = 181;
  repeated int32 vms_pwm_cnt = 182;
  repeated float vms_analog = 183;
  repeated float vms_sbus_cmd = 184;
  repeated float vms_pwm_cmd = 185;
  repeated float vms_aux = 186;
  /* Telemetry data */
  int32 waypoint_frame = 200;
  int32 waypoint_cmd = 201;
  float waypoint_param1 = 202;
  float waypoint_param2 = 203;
  float waypoint_param3 = 204;
  float waypoint_param4 = 205;
  sint32 waypoint_x = 206;
  sint32 waypoint_y = 207;
  float waypoint_z = 208;
  repeated float telem_param = 209;
}
